package com.pigeon3d


class MapSsoView(val map : MapSso, val material : Material) {
    lazy val axisVertexBuffer = {
        val mi = CameraIso.m.inverse
        VBO.vec4({
            val b = Vec4Buffer(4)
            b.set(mi*vec4(0, 0, 0, 1))
            b.set(mi*vec4(1, 0, 0, 1))
            b.set(mi*vec4(0, 1, 0, 1))
            b.set(mi*vec4(0, 0, 1, 1))
            b
        })
    }

    def drawLayout {
        ColorSource(vec4(1, 0, 0, 1)).draw(axisVertexBuffer, ArrayIndexSource([0, 1], GL_LINES))
        ColorSource(vec4(0, 1, 0, 1)).draw(axisVertexBuffer, ArrayIndexSource([0, 2], GL_LINES))
        ColorSource(vec4(0, 0, 1, 1)).draw(axisVertexBuffer, ArrayIndexSource([0, 3], GL_LINES))
        /*glPushMatrix
        egRotate(45, 0, 0, 1)
        glBegin(GL_LINES)
        {
        val ISO = EGMapSso.ISO
        val size = map.size
        val left = -ISO
        val top = ISO*size.height
        val bottom = ISO*(-size.width)
        val right = ISO*(size.width + size.height - 1)
        egNormal3(0, 0, 1)
        egVertex3(left, top, 0.0)
        egVertex3(left, bottom, 0.0)

        egVertex3(left, bottom, 0.0)
        egVertex3(right, bottom, 0.0)

        egVertex3(right, bottom, 0.0)
        egVertex3(right, top, 0.0)

        egVertex3(right, top, 0.0)
        egVertex3(left, top, 0.0)
        }
        glEnd
        glPopMatrix

        egColor3(1.0, 1.0, 1.0)
        glBegin(GL_LINES)
        {
        map.fullTiles.for(tile -> {
        val p = tile
        egNormal3(0, 0, 1)
        egVertex3(p.x - 0.5, p.y - 0.5, 0.0)
        egVertex3(p.x + 0.5, p.y - 0.5, 0.0)

        egVertex3(p.x + 0.5, p.y - 0.5, 0.0)
        egVertex3(p.x + 0.5, p.y + 0.5, 0.0)

        egVertex3(p.x + 0.5, p.y + 0.5, 0.0)
        egVertex3(p.x - 0.5, p.y + 0.5, 0.0)

        egVertex3(p.x - 0.5, p.y + 0.5, 0.0)
        egVertex3(p.x - 0.5, p.y - 0.5, 0.0)
        })
        }
        glEnd
        egMapDrawAxis   */
    }


    val plane : Mesh = {
        val limits = map.limits
        val l = limits.x - map.size.x - 0.5
        val r = limits.x2 + 1.5
        val t = limits.y - map.size.y - 0.5
        val b = limits.y2 + 1.5
        val w = limits.width + 7
        val h = limits.height + 7
        Mesh(VBO.mesh({
            val buf = MeshDataBuffer(4)
            buf.set(MeshData(vec2(0, 0), vec3(0, 1, 0), vec3(l, 0, b)))
            buf.set(MeshData(vec2(w, 0), vec3(0, 1, 0), vec3(r, 0, b)))
            buf.set(MeshData(vec2(0, h), vec3(0, 1, 0), vec3(l, 0, t)))
            buf.set(MeshData(vec2(w, h), vec3(0, 1, 0), vec3(r, 0, t)))
            buf
        }), EmptyIndexSource.triangleStrip)
    }

    private val planeVao = plane.vao(material, false)

    def draw {
        context.cullFace.disabled {
            planeVao.draw
        }
    }
}