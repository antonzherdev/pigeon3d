package com.pigeon3d


struct CameraReserve(val left : float4, val right : float4, val top : float4, val bottom : float4) {
    def width = left + right
    def height = top + bottom

    def mul(f4 : float4) : CameraReserve = CameraReserve(left * f4, right * f4, top * f4, bottom * f4)
    def div(f4 : float4) : CameraReserve = CameraReserve(left / f4, right / f4, top / f4, bottom / f4)
}


class MapSso(val size : vec2i) {
    static val ISO = 0.70710678118655 //sqrt(2)/2 = tg 45

    val limits = vec2i(
        (1 - size.y)/2 - 1,
        (1 - size.x)/2 - 1)
    .rectTo(vec2i(
        (2*size.x + size.y - 3)/2 + 1,
        (size.x + 2*size.y - 3)/2 + 1))
    val fullTiles : [vec2i] = allPosibleTiles.filter(isFull(_)).toArray
    val partialTiles : [vec2i] = allPosibleTiles.filter(isPartial(_)).toArray
    val allTiles : [vec2i] = fullTiles + partialTiles

    def isFull(tile : vec2i) : bool =
        tile.y + tile.x >= 0 //left
        && tile.y - tile.x <= size.y - 1 //top
        && tile.y + tile.x <= size.x + size.y - 2 //right
        && tile.y - tile.x >= -size.x + 1

    def isPartial(tile : vec2i) : bool =
        tile.y + tile.x >= -1 //left
        && tile.y - tile.x <= size.y //top
        && tile.y + tile.x <= size.x + size.y - 1 //right
        && tile.y - tile.x >= -size.x && (
            tile.y + tile.x == -1 //left
            || tile.y - tile.x == size.y //top
            || tile.y + tile.x == size.x + size.y - 1 //right
            || tile.y - tile.x == -size.x //bottom
        )
    def isLeft(tile : vec2i) : bool = tile.y + tile.x == -1
    def isTop(tile : vec2i) : bool = tile.y - tile.x == size.y
    def isRight(tile : vec2i) : bool = tile.y + tile.x == size.x + size.y - 1
    def isBottom(tile : vec2i) : bool = tile.y - tile.x == -size.x

    def isVisible(tile : vec2i) : bool =
        tile.y + tile.x >= -1 //left
        && tile.y - tile.x <= size.y //top
        && tile.y + tile.x <= size.x + size.y - 1 //right
        && tile.y - tile.x >= -size.x

    def isVisible(vec2 : vec2) : bool =
        vec2.y + vec2.x >= -1 //left
        && vec2.y - vec2.x <= size.y //top
        && vec2.y + vec2.x <= size.x + size.y - 1 //right
        && vec2.y - vec2.x >= -size.x //bottom

    def distanceToMap(vec2 : vec2) : vec2 =
        vec2(
            if(vec2.y + vec2.x < -1) vec2.y + vec2.x + 1 //left
            else if(vec2.y + vec2.x > size.x + size.y - 1) vec2.y + vec2.x - size.x - size.y + 1 //right
            else 0,
            if(vec2.y - vec2.x > size.y) vec2.y - vec2.x - size.y //top
            else if(vec2.y - vec2.x < -size.x ) vec2.y - vec2.x + size.x //bottom
            else 0
        )

    private def allPosibleTiles : Chain<vec2i> =
        Range(start = limits.x, end = limits.x2, step = 1).chain
            .mul<int>(Range(start = limits.y, end = limits.y2, step = 1))
            .map(vec2i(_.a, _.b))

    private def tileCutAxis(less : int, more : int) : int =
        if(less == more) 1
        else if(less < more) 0
        else 2

    def cutStateFor(tile : vec2i) : MapTileCutState = MapTileCutState(tileCutAxis(0, tile.x + tile.y), tileCutAxis(tile.y - tile.x, size.y - 1),
         tileCutAxis(tile.x + tile.y, size.x + size.y - 2), tileCutAxis(-size.x + 1, tile.y - tile.x))
}

struct MapTileCutState(val x : int, val y : int, val x2 : int, val y2 : int)

