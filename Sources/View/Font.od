package com.pigeon3d

import java.nio._

struct TextAlignment(val x : float4, val y : float4, val baseline : bool, val shift : vec2) {
    static def apply(x : float4, y : float4) = TextAlignment(x, y, false, vec2(0, 0))
    static def apply(x : float4, y : float4, shift : vec2) = TextAlignment(x, y, false, shift)
    static def baseline(x : float4) = TextAlignment(x, 0, true, vec2(0, 0))
    static val left = TextAlignment(-1, 0, true, vec2(0, 0))
    static val right = TextAlignment(1, 0, true, vec2(0, 0))
    static val center = TextAlignment(0, 0, true, vec2(0, 0))
}

abstract class Font {
    def texture : Texture
    val symbolsChanged = Signal<void>()

    static val newLineDesc = FontSymbolDesc(0, vec2(0, 0), vec2(0, 0), Rect(0, 0, 0, 0), true)
    static val zeroDesc = FontSymbolDesc(0, vec2(0, 0), vec2(0, 0), Rect(0, 0, 0, 0), false)

    def height : uint
    def size : uint

    //return size of text in pixels
    def measureInPoints(text : string) : vec2 = {
        val pair = buildSymbolArray(hasGL = false, text)
        val symbolsArr = pair.a
        val newLines = pair.b

        var fullWidth = 0
        var lineWidth = 0
        symbolsArr.for{s ->
            if(s.isNewLine) {
                if(lineWidth > fullWidth) fullWidth = lineWidth
                lineWidth = 0
            } else {
                lineWidth += s.width
            }
        }
        if(lineWidth > fullWidth) fullWidth = lineWidth
        vec2(fullWidth, height.cast<float4>*(newLines + 1))/Director.current.scale
    }

    def symbolOpt(smb : char) : FontSymbolDesc?


    //return size of text in projection space
    def measureP(text : string) : vec2 = measureInPoints(text)*2.0/context.scaledViewSize.value
    def measureC(text : string) : vec2 = matrix.p.divBySelf(vec4(measureP(text), 0, 0)).xy

    static val vbDesc = VertexBufferDesc(FontPrintData.type, position = 0, uv = 2*4, normal = -1, color = -1, model = -1)

    def resymbol(hasGL : bool) : bool = false

    private def buildSymbolArray(hasGL : bool, text : string) : ([FontSymbolDesc], int) = synchronized(self) {
        var newLines = 0
        var symbolsArr = text.chain.mapOpt<FontSymbolDesc>{s ->
            if(s == 10) {
                newLines++
                newLineDesc
            } else symbolOpt(s)
        }.toArray
        if(resymbol(hasGL)) {
            symbolsArr = text.chain.mapOpt<FontSymbolDesc>{s ->
                if(s == 10) newLineDesc else symbolOpt(s)
            }.toArray
        }
        (symbolsArr, newLines)
    }

    def vao(text : string, at : vec3, alignment : TextAlignment) : SimpleVertexArray<FontShaderParam> = {
        val pos = matrix.wcp.mul(vec4(at, 1)).xy + (alignment.shift/context.scaledViewSize.value*2)
        val pair = buildSymbolArray(hasGL = true, text)
        val symbolsArr = pair.a
        val newLines = pair.b
        val symbolsCount = symbolsArr.count - newLines
        val vertexes = FontPrintDataBuffer(symbolsCount * 4)
        val indexes = Int4Buffer(symbolsCount * 6)
        val vpSize = context.viewport.size/2.0

        var n : uint4 = 0

        var linesWidth = MArray<int>()
        var linesWidthIterator : Iterator<int>?
        var x = pos.x
        if(alignment.x != -1) {
            var lineWidth = 0
            symbolsArr.for{s ->
            if(s.isNewLine) {
                linesWidth.append(lineWidth)
                lineWidth = 0
            } else {
                lineWidth += s.width
            }
            }
            linesWidth.append(lineWidth)
            linesWidthIterator = linesWidth.iterator
            x = pos.x - linesWidthIterator.get.next/vpSize.x*(alignment.x/2 + 0.5)
        }
        val hh = height.cast<float4>/vpSize.y
        var y =
            if(alignment.baseline) pos.y + size.cast<float4>/vpSize.y
            else pos.y - hh*(newLines + 1)*(alignment.y/2 - 0.5)

        symbolsArr.for {s ->
        if(s.isNewLine) {
            x = if(alignment.x == -1) pos.x
            else pos.x - linesWidthIterator.get.next/vpSize.x*(alignment.x/2 + 0.5)
            y -= hh
        } else {
            val size = s.size/vpSize
            val tr = s.textureRect
            val v0 = vec2(x + s.offset.x/vpSize.x, y - s.offset.y/vpSize.y)

            vertexes.set(FontPrintData(v0, tr.p))
            vertexes.set(FontPrintData(vec2(v0.x, v0.y - size.y), tr.ph))
            vertexes.set(FontPrintData(vec2(v0.x + size.x, v0.y - size.y), tr.phw))
            vertexes.set(FontPrintData(vec2(v0.x + size.x, v0.y), tr.pw))

            indexes.set(n)
            indexes.set(n + 1)
            indexes.set(n + 2)
            indexes.set(n + 2)
            indexes.set(n + 3)
            indexes.set(n)

            x += s.width/vpSize.x
            n += 4
        }
        }
        val vb = VBO(vbDesc, vertexes)
        val ib = IBO(indexes)
        FontShader.instance.vao(vb, ib)
    }

    def draw(text : string, at : vec3, alignment : TextAlignment, color : vec4) {
        val vao = vao(text, at, alignment)
        context.cullFace.disabled {
            vao.draw(FontShaderParam(texture, color, shift = vec2(0, 0)))
        }
    }

    def beReadyFor(text : string) : Font = {
        text.chain.for{s ->
            symbolOpt(s)
        }
        self
    }
}

case class FontSymbolDesc(val width : float4, val offset : vec2, val size : vec2, val textureRect : Rect, val isNewLine : bool)
struct FontPrintData(var position : vec2, var uv : vec2)

@ObjC
class FontPrintDataBuffer(count : uint4) extends UBuffer<FontPrintData>(FontPrintData.type, count)
{
    inline def get : FontPrintData = _get
    inline def set(v : FontPrintData) {
        _set(v)
    }
}

@Java
class FontPrintDataBuffer(count : uint) extends Buffer<FontPrintData>(count, 44) {
    override val bytes : JavaFloatBuffer = JavaFloatBuffer.allocate(count)
    inline def get : FontPrintData = FontPrintData(vec2(bytes.get, bytes.get), vec2(bytes.get, bytes.get))
    inline def set(v: FontPrintData) {
        bytes.put(v.position.x)
        bytes.put(v.position.y)
        bytes.put(v.uv.x)
        bytes.put(v.uv.y)
    }
}

