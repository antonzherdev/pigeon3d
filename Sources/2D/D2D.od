package com.pigeon3d

object D2D {
    def install {}
    private val vertexes = BillboardBufferDataBuffer(4)
    private val vb = VBO.mut(Sprite.vbDesc, GL_STREAM_DRAW)
    private val vaoForColor = Mesh(vb, EmptyIndexSource.triangleStrip).vao(BillboardShaderSystem.shaderFor(key = BillboardShaderKey(
        texture = false, alpha = false, shadow = false, modelSpace = BillboardShaderSpace.camera
    )))
    private val vaoForTexture = Mesh(vb, EmptyIndexSource.triangleStrip).vao(BillboardShaderSystem.shaderFor(key = BillboardShaderKey(
        texture = true, alpha = false, shadow = false, modelSpace = BillboardShaderSpace.camera
    )))
    def drawSprite(material : ColorSource, at : vec3, rect : Rect) {
        drawSprite(material, at, rect.stripQuad)
    }

    def drawSprite(material : ColorSource, at : vec3, quad : Quad) {
        drawSprite(material, at, quad, material.texture?.uv.getOr(Rect(0, 0, 1, 1)).upsideDownStripQuad)
    }

    def drawSprite(material : ColorSource, at : vec3, quad : Quad, uv : Quad) {
        //        if(true) return nil
        vertexes.reset
        writeSprite(vertexes, material, at, quad, uv)
        vb.set(vertexes)
        context.cullFace.disabled {
            if(material.texture == nil) vaoForColor.draw(material)
            else vaoForTexture.draw(material)
        }
    }

    inline def writeSprite(in : BillboardBufferDataBuffer, material : ColorSource, at : vec3, quad : Quad, uv : Quad) {
        in.set(BillboardBufferData(at, quad.p0, material.color, uv.p0))
        in.set(BillboardBufferData(at, quad.p1, material.color, uv.p1))
        in.set(BillboardBufferData(at, quad.p2, material.color, uv.p2))
        in.set(BillboardBufferData(at, quad.p3, material.color, uv.p3))
    }

    inline def writeQuadIndex(in : Int4Buffer, i : uint4) {
        in.set(i)
        in.set(i + 1)
        in.set(i + 2)
        in.set(i + 1)
        in.set(i + 2)
        in.set(i + 3)
    }

    private val lineVb = VBO.mutMesh(GL_STREAM_DRAW)
    private val lineVertexes = {
        val pp = Pointer(MeshData.type, 2)
        var p = pp
        p.uv = vec2(0, 0)
        p.normal = vec3(0, 0, 1)
        p++
        p.uv = vec2(1, 1)
        p.normal = vec3(0, 0, 1)
        pp
    }
    private val lineVao = Mesh(lineVb, EmptyIndexSource.lines).vao(SimpleShaderSystem.colorShader)
    def drawLine(material : ColorSource, p0 : vec2, p1 : vec2) {
        var v = lineVertexes
        v.position = vec3(p0, 0)
        v++
        v.position = vec3(p1, 0)
        lineVb.set(lineVertexes, 2)

        context.cullFace.disabled {
            lineVao.draw(material)
        }
    }

    private lazy val circleVaoWithSegment = Mesh(
        VBO.vec2({
            val b = Vec2Buffer(4)
            b.set(-1, -1)
            b.set(-1, 1)
            b.set(1, -1)
            b.set(1, 1)
            b
        }),
        EmptyIndexSource.triangleStrip).vao(CircleShader.withSegment)
    def drawCircle(backColor : vec4, strokeColor : vec4, at : vec3, radius : float4, relative : vec2, segmentColor : vec4,
        start : float, end : float)
    {
        context.cullFace.disabled {
            circleVaoWithSegment.draw(CircleParam(backColor, strokeColor, at, radiusP(radius), relative, CircleSegment(segmentColor, start, end)))
        }
    }
    private lazy val circleVaoWithoutSegment = Mesh(
    VBO.vec2({
        val b = Vec2Buffer(4)
        b.set(-1, -1)
        b.set(-1, 1)
        b.set(1, -1)
        b.set(1, 1)
        b
    }),
    EmptyIndexSource.triangleStrip).vao(CircleShader.withoutSegment)

    def drawCircle(backColor : vec4, strokeColor : vec4, at : vec3, radius : float4, relative : vec2) {
        context.cullFace.disabled {
            circleVaoWithoutSegment.draw(CircleParam(backColor, strokeColor, at, radiusP(radius), relative, nil))
        }
    }

    private def radiusP(r : float4) : vec2 = {
        val l = (matrix.value.wcp * vec4(r, 0, 0, 0)).xy.length
        val vps = context.viewport.size

        if(vps.y <= vps.x) vec2(l * vps.y/vps.x, l)
        else vec2(l, l * vps.x/vps.y)
    }
}
